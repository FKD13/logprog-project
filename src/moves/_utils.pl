:- module('_utils', [test_position/5, get_expanded_moves/6]).

/** <module> _utils - Utilities

This module provides some utility predicates for generating moves.

*/

:- use_module('../utils/board_utils').

%!  test_position(+Board, +Piece, +OriginalCoord, +Coord, -Moves)
%
%   If the position at Coord is empty or occupied by an enemy 
%   add Coord to the list of possible moves.
%
%   @arg Board The board.
%   @arg Piece The piece we want to move.
%   @arg OriginalCoord The current location of the piece.
%   @arg Coord A possible new location of the piece.
%   @arg Moves The possible moves. A difference List.
test_position(_    , _          , _, Coord, T-T) :- outside_board(Coord), !.
test_position(Board, p(Color, _), _, Coord, T-T) :- get_piece_at(Board, Coord, p(Color, _)), !.
test_position(_    , Piece      , O, Coord, [ m(Piece, O, Coord) | T]-T).


%!  get_expanded_moves(+Expander, +Board, +Piece, +OriginalCoord, +Coord, -Moves)
%
%   If the position at Coord is empty add Coord to the list of possible moves 
%   and try the next Coord generated by Expander. If it is occupied by an enemy 
%   just add as possible move. Else add nothing and stop expanding.
%
%   Expander must be of form:
%
%   ~~~
%   %!  expander(+Coord, -NewCoord)
%   expander(R1/C1, R2/C2) :- R2 is R1 + 1, C2 is C1 + 1.
%   ~~~
%
%   @arg Expander A predicate to generate the next Coord.
%   @arg Board The board.
%   @arg Piece The piece we want to move.
%   @arg OriginalCoord The current location of the piece.
%   @arg Coord A possible new location of the piece.
%   @arg Moves The possible moves. A difference List.
get_expanded_moves(_       , _    , _          , _, Coord, X-X) :- outside_board(Coord), !.
get_expanded_moves(_       , Board, p(Color, _), _, R/C  , T-T) :- get_piece_at(Board, R/C, p(Color, _)), !.
get_expanded_moves(_       , Board, Piece      , O, R/C  , [ m(Piece, O, R/C) | T ]-T) :- get_piece_at(Board, R/C, p(_, _)), !.
get_expanded_moves(Expander, Board, Piece      , O, Coord, [ m(Piece, O, Coord) | Moves ]-T) :-
    call(Expander, Coord, NewCoord),
    get_expanded_moves(Expander, Board, Piece, O, NewCoord, Moves-T).